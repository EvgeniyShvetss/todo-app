{"version":3,"sources":["redux/types/types.js","components/TaskItem/TaskItem.jsx","redux/actions/todoAction.js","components/TaskItem/index.js","components/TaskList/TaskList.jsx","components/TaskList/index.js","components/CreateTask/CreateTask.jsx","components/CreateTask/index.js","App.js","redux/reducers/todoReducer.js","redux/reducers/rootReducer.js","index.js"],"names":["ADD_TASK","DELETE_TASK","SELECTED_TASK","RENAME_TODO","DELETE_SELECTED_TASK","mapDispatchToProps","deleteTaskAction","id","type","selectTaskAction","payload","renameTodoAction","text","TaskItem","connect","title","done","useState","state","setState","value","setValue","className","checked","onChange","onSubmit","e","preventDefault","length","target","onClick","deleteSelectedTaskAction","TaskList","tasks","doneTasks","filter","item","map","task","addTaskAction","Date","now","toString","CreateTask","placeholder","initialState","todoReducer","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd8b2bf9.chunk.js","sourcesContent":["export const ADD_TASK = \"ADD_TASK\"\nexport const DELETE_TASK = \"DELETE_TASK\"\nexport const SELECTED_TASK = \"SELECTED_TASK\"\nexport const RENAME_TODO = \"RENAME_TODO\"\nexport const DELETE_SELECTED_TASK = \"DELETE_SELECTED_TASK\"\n","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport PropTypes from \"prop-types\"\nimport \"./task-item.scss\"\nimport {\n  deleteTask,\n  selectTask,\n  renameTodo,\n} from \"../../redux/actions/todoAction\"\n\nconst TaskItem = ({\n  title,\n  deleteTaskAction,\n  id,\n  selectTaskAction,\n  done,\n  renameTodoAction,\n}) => {\n  const [state, setState] = useState(false)\n  const [value, setValue] = useState(\"\")\n  const handleChange = ({ target }) => {\n    setValue(target.value)\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (value.length >= 1) {\n      renameTodoAction(value, id)\n      setValue(\"\")\n    }\n    setState(false)\n  }\n  return (\n    <div className=\"task-item\">\n      <div className=\"task-item__text\">\n        <div className=\"task-item__check\">\n          <input\n            type=\"checkbox\"\n            checked={done}\n            onChange={() => selectTaskAction(id)}\n          />\n        </div>\n        {state ? (\n          <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={value.title} onChange={handleChange} />\n            <button type=\"submit\">\n              <i className=\"fa fa-check\" />\n            </button>\n          </form>\n        ) : (\n          <div className=\"task-item__title\">{title}</div>\n        )}\n      </div>\n      <div className=\"task-item__control\">\n        <button type=\"button\" className=\"rename\" onClick={() => setState(true)}>\n          <i className=\"fa fa-pencil\" />\n        </button>\n        <button\n          className=\"delete\"\n          type=\"button\"\n          onClick={() => deleteTaskAction(id)}\n        >\n          <i className=\"fa fa-trash-o\" />\n        </button>\n      </div>\n    </div>\n  )\n}\n\nTaskItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  deleteTaskAction: PropTypes.func.isRequired,\n  selectTaskAction: PropTypes.func.isRequired,\n  renameTodoAction: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  done: PropTypes.bool.isRequired,\n}\n\nconst mapDispatchToProps = {\n  deleteTaskAction: deleteTask,\n  selectTaskAction: selectTask,\n  renameTodoAction: renameTodo,\n}\n\nexport default connect(null, mapDispatchToProps)(TaskItem)\n","import {\n  ADD_TASK,\n  DELETE_SELECTED_TASK,\n  DELETE_TASK,\n  RENAME_TODO,\n  SELECTED_TASK,\n} from \"../types/types\"\n\nexport function addTask(title) {\n  return {\n    type: ADD_TASK,\n    payload: {\n      id: Date.now().toString(),\n      title,\n      done: false,\n    },\n  }\n}\n\nexport function deleteTask(id) {\n  return {\n    type: DELETE_TASK,\n    id,\n  }\n}\n\nexport function selectTask(id) {\n  return {\n    type: SELECTED_TASK,\n    payload: id,\n  }\n}\nexport function renameTodo(text, id) {\n  return {\n    type: RENAME_TODO,\n    payload: {\n      text,\n      id,\n    },\n  }\n}\n\nexport function deleteSelectedTask() {\n  return {\n    type: DELETE_SELECTED_TASK,\n  }\n}\n","import TaskItem from \"./TaskItem\"\n\nexport default TaskItem\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport PropTypes from \"prop-types\"\nimport TaskItem from \"../TaskItem\"\nimport { deleteSelectedTask } from \"../../redux/actions/todoAction\"\nimport \"./task-list.scss\"\n\nconst TaskList = ({ tasks, deleteSelectedTaskAction }) => {\n  const doneTasks = tasks.filter((item) => item.done)\n  return (\n    <div className=\"task-list\">\n      <div className=\"task-list__item\">\n        {tasks.map((task) => (\n          <TaskItem\n            title={task.title}\n            id={task.id}\n            key={task.id}\n            done={task.done}\n          />\n        ))}\n      </div>\n      {doneTasks.length > 0 && (\n        <button\n          className=\"task-list__selected-item\"\n          type=\"button\"\n          onClick={() => deleteSelectedTaskAction()}\n        >\n          <i className=\"fa fa-trash-o\" />\n        </button>\n      )}\n    </div>\n  )\n}\n\nTaskList.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n  deleteSelectedTaskAction: PropTypes.func.isRequired,\n}\nconst mapDispatchToProps = {\n  deleteSelectedTaskAction: deleteSelectedTask,\n}\n\nconst mapStateToProps = (state) => ({\n  tasks: state.state.tasks,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList)\n","import TaskList from \"./TaskList\"\n\nexport default TaskList\n","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport PropTypes from \"prop-types\"\nimport \"./create-task.scss\"\nimport { addTask } from \"../../redux/actions/todoAction\"\n\nconst CreateTask = ({ addTaskAction }) => {\n  const [state, setState] = useState({ title: \"\" })\n  const handleChange = ({ target }) => {\n    setState({ ...state, title: target.value })\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (state.title.length >= 1) {\n      addTaskAction(state.title)\n      setState({ ...state, title: \"\" })\n    }\n  }\n  return (\n    <div className=\"create-task\">\n      <form onSubmit={handleSubmit} className=\"create-task__form\">\n        <input\n          className=\"create-task__input\"\n          value={state.title}\n          onChange={handleChange}\n          placeholder=\"Enter new todo\"\n        />\n        <button type=\"submit\" className=\"create-task__btn\">\n          add\n        </button>\n      </form>\n    </div>\n  )\n}\n\nCreateTask.propTypes = {\n  addTaskAction: PropTypes.func.isRequired,\n}\n\nconst mapDispatchToProps = {\n  addTaskAction: addTask,\n}\n\nexport default connect(null, mapDispatchToProps)(CreateTask)\n","import CreateTask from \"./CreateTask\"\n\nexport default CreateTask\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport PropTypes from \"prop-types\"\nimport TaskList from \"./components/TaskList\"\nimport \"./App.scss\"\nimport TaskInput from \"./components/CreateTask\"\n\nconst App = ({ tasks }) => (\n  <div className=\"app\">\n    <div className=\"app__container\">\n      <div className=\"app__text\">\n        <h1 className=\"app_title\">ToDo app</h1>\n        <h6>Count task {tasks.length}</h6>\n      </div>\n      <TaskInput />\n      <div className=\"app__task-container\">\n        <TaskList />\n      </div>\n    </div>\n  </div>\n)\n\nApp.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  tasks: state.state.tasks,\n})\n\nexport default connect(mapStateToProps, null)(App)\n","import {\n  ADD_TASK,\n  DELETE_SELECTED_TASK,\n  DELETE_TASK,\n  RENAME_TODO,\n  SELECTED_TASK,\n} from \"../types/types\"\n\nconst initialState = {\n  tasks: [\n    { id: \"0\", title: \"Yor first task\", done: false },\n    { id: \"1\", title: \"Yor second task\", done: false },\n  ],\n}\n\nfunction todoReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TASK:\n      return { ...state, tasks: [...state.tasks, action.payload] }\n\n    case DELETE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter((item) => item.id !== action.id),\n      }\n\n    case SELECTED_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.map((item) => {\n          if (action.payload === item.id) {\n            return { ...item, done: !item.done }\n          }\n          return item\n        }),\n      }\n    case RENAME_TODO:\n      return {\n        ...state,\n        tasks: state.tasks.map((item) => {\n          if (action.payload.id === item.id) {\n            return { ...item, title: action.payload.text }\n          }\n          return item\n        }),\n      }\n    case DELETE_SELECTED_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter((item) => !item.done),\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default todoReducer\n","import { combineReducers } from \"redux\"\nimport todoReducer from \"./todoReducer\"\n\nconst rootReducer = combineReducers({\n  state: todoReducer,\n})\n\nexport default rootReducer\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { createStore } from \"redux\"\nimport App from \"./App\"\nimport rootReducer from \"./redux/reducers/rootReducer\"\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}